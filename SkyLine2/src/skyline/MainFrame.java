/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package skyline;

import java.awt.Color;
import java.awt.Graphics2D;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JFileChooser;

/**
 *
 * @author Homayoon
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        open = new javax.swing.JButton();
        solve = new javax.swing.JButton();
        save = new javax.swing.JButton();
        exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SkyLine");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));
        jPanel1.setForeground(new java.awt.Color(255, 255, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 490, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        open.setBackground(new java.awt.Color(0, 0, 0));
        open.setForeground(new java.awt.Color(255, 255, 255));
        open.setText("Open");
        open.setBorder(null);
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });

        solve.setBackground(new java.awt.Color(0, 0, 0));
        solve.setForeground(new java.awt.Color(255, 255, 255));
        solve.setText("Solve");
        solve.setBorder(null);
        solve.setEnabled(false);
        solve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveActionPerformed(evt);
            }
        });

        save.setBackground(new java.awt.Color(0, 0, 0));
        save.setForeground(new java.awt.Color(255, 255, 255));
        save.setText("Save");
        save.setBorder(null);
        save.setEnabled(false);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        exit.setBackground(new java.awt.Color(0, 0, 0));
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setText("Exit");
        exit.setBorder(null);
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(solve, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .addComponent(open, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(save, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(exit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(181, Short.MAX_VALUE)
                .addComponent(open, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solve, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        open.getAccessibleContext().setAccessibleName("Open");
        save.getAccessibleContext().setAccessibleName("Save");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        // TODO add your handling code here:
        System.out.println("Open");

        JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(fileChooser);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            inputPath = fileChooser.getSelectedFile().getAbsolutePath();
            System.out.println("" + inputPath);

            solve.setEnabled(true);
            System.out.println("Solve button enabled");
        }
    }//GEN-LAST:event_openActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.out.println("Exit");
        System.exit(777);
    }//GEN-LAST:event_exitActionPerformed

    private void solveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveActionPerformed
        // TODO add your handling code here:
        System.out.println("Solve");
        solveSkyLine();
        System.out.println("SkyLine solved");
        save.setEnabled(true);
        System.out.println("Save button enabeled");
        darwInPaintPanel();
    }//GEN-LAST:event_solveActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        System.out.println("Save");

        JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showSaveDialog(fileChooser);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            outputPath = fileChooser.getSelectedFile().getAbsolutePath();
            System.out.println("" + outputPath);
            saveInFile();
        }
    }//GEN-LAST:event_saveActionPerformed

    // my codes are here
    public static void solveSkyLine() {
        Boolean problem = false;
        BufferedReader br = null;
        ArrayList<String> infos = new ArrayList<>();

        numOfHouses = 0;

        try {
            br = new BufferedReader(new FileReader(inputPath));
            try {
                String line = br.readLine();
                while (line != null) {
                    infos.add(line);
                    line = br.readLine();
                }
            } catch (IOException ex) {
                System.out.println("I/O Exception occured");
                problem = true;
            } finally {
                try {
                    br.close();
                } catch (IOException ex) {
                    System.out.println("I/O Exception occured");
                    problem = true;
                }
            }

        } catch (FileNotFoundException ex) {
            System.out.println("File Not Found");
            problem = true;
        }
        if (!problem) {
            Building[] buildings_1 = null;

            try {
                numOfHouses = new Integer(infos.get(0));
                buildings_1 = new Building[numOfHouses];
                for (int i = 1; i <= numOfHouses; i++) {
                    String[] split = infos.get(i).split(" ");
                    float hx = new Float(split[0]);
                    float hy = new Float(split[1]);
                    float hh = new Float(split[2]);
                    buildings_1[i - 1] = new Building(hx, hy, hh);
                }
            } catch (Exception e) {
                System.out.println("Format of entry is wrong");
            }
            points = findSkyline(buildings_1);
            float cur_h = 0;
            float cur_x = -1;
            for (int i = 0; i < points.size(); i++) {
                if (points.get(i).y == cur_h) {
                    points.remove(i);
                    i--;
                } else {
                    cur_h = points.get(i).y;
                }
            }

            for (int i = 0; i < points.size();
                    i++) {
                if (cur_x == points.get(i).x) {
                    points.remove(i - 1);
                    i--;
                } else {
                    cur_x = points.get(i).x;
                }
            }
        }
    }

    public static void saveInFile() {
        try {

            File file = new File(outputPath);

            // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);

            bw.write("" + numOfHouses);
            bw.newLine();
            bw.flush();
            System.out.println("" + numOfHouses);
            for (Point point : points) {
                if (point.y % 1 == 0) {
                    int mm = (int) point.y;

                    if (point.x % 1 == 0) {
                        bw.write("" + (int) point.x + " " + mm);
                        System.out.println("" + (int) point.x + " " + mm);
                    } else {
                        bw.write("" + point.x + " " + mm);
                        System.out.println("" + point.x + " " + mm);
                    }
                    bw.newLine();
                    bw.flush();
                } else {

                    if (point.x % 1 == 0) {
                        bw.write("" + (int) point.x + " " + point.y);
                        System.out.println("" + (int) point.x + " " + point.y);
                    } else {
                        bw.write("" + point.x + " " + point.y);
                        System.out.println("" + point.x + " " + point.y);
                    }
                    bw.newLine();
                    bw.flush();
                }
            }
            bw.newLine();
            bw.flush();

            bw.write(" // First number x");
            bw.newLine();
            bw.flush();

            bw.write(" // Second number height");
            bw.newLine();
            bw.flush();
        } catch (IOException e) {
            System.out.println("I/O error occured");
        }
    }

    public static ArrayList<Point> findSkyline(Building[] buildings) {
        int n = buildings.length;

        System.out.println("" + n);
        for (Building building : buildings) {
            System.out.println("" + building + " ");
        }

        if (n == 1) {
            ArrayList<Point> sl = new ArrayList<Point>();
            sl.add(new Point(buildings[0].left, buildings[0].height));
            sl.add(new Point(buildings[0].right, 0));
            return sl;
        }

        ArrayList<Point> sl1 = findSkyline(Arrays.copyOfRange(buildings, 0, n / 2));
        ArrayList<Point> sl2 = findSkyline(Arrays.copyOfRange(buildings, n / 2, n));
        return merge(sl1, sl2);
    }

    public static ArrayList<Point> merge(ArrayList<Point> sl1, ArrayList<Point> sl2) {
        ArrayList<Point> skyline = new ArrayList<Point>();
        float curH1 = 0, curH2 = 0;
        int curX = 0;

        while (!sl1.isEmpty() && !sl2.isEmpty()) {
            if (sl1.get(0).x < sl2.get(0).x) {

                System.out.println("" + sl1.get(0).x + " < " + sl2.get(0).x);

                curX = (int) sl1.get(0).x;
                curH1 = sl1.get(0).y;
                sl1.remove(0);
                skyline.add(new Point(curX, Math.max(curH1, curH2)));
            } else {
                System.out.println("" + sl1.get(0).x + " > " + sl2.get(0).x);

                curX = (int) sl2.get(0).x;
                curH2 = sl2.get(0).y;
                sl2.remove(0);

                skyline.add(new Point(curX, Math.max(curH1, curH2)));
            }
        }
        if (sl1.isEmpty()) {
            skyline.addAll(sl2);
        } else if (sl2.isEmpty()) {
            skyline.addAll(sl1);
        }
        return skyline;
    }

    public static class Building {

        float left, right, height;

        public Building(float left, float right, float height) {
            this.left = left;
            this.right = right;
            this.height = height;
        }

        @Override
        public String toString() {
            return ("left = " + left + " right = " + right + " height = " + height);
        }

    }

    public static class Point {

        public float x;
        public float y;

        public Point(float x, float y) {
            this.x = x;
            this.y = y;
        }
    }
    //

    //draw in jpanel1
    public static void darwInPaintPanel() {
        Graphics2D g2d = (Graphics2D) jPanel1.getGraphics();
        
        g2d.setColor(jPanel1.getBackground());
        g2d.fillRect(0, 0, jPanel1.getWidth(), jPanel1.getHeight());
        
        g2d.setColor(Color.YELLOW);

        int jpanelHeight = jPanel1.getHeight();
        float lastx = 0, lasty = 0;
        if (points.size() > 0) {
            g2d.drawLine((int) (points.get(0).x * 10), jpanelHeight,
                    (int) (points.get(0).x * 10), jpanelHeight - (int) (points.get(0).y * 10));
            lastx = points.get(0).x * 10;
            lasty = points.get(0).y * 10;
        }
        for (int i = 1; i < points.size(); i++) {
            g2d.drawLine((int) lastx, jpanelHeight - (int) lasty,
                    (int) (points.get(i).x * 10), jpanelHeight - (int) lasty);
            g2d.drawLine((int) (points.get(i).x * 10), jpanelHeight - (int) lasty,
                    (int) (points.get(i).x * 10), jpanelHeight - (int) (points.get(i).y * 10));
            lastx = points.get(i).x * 10;
            lasty = points.get(i).y * 10;
        }

        jPanel1.revalidate();
    }
    //

    /**
     * @param args the command line arguments
     */
    // my variables
    private static String inputPath, outputPath;
    private static ArrayList<Point> points;
    private static int numOfHouses;
    //

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        // my codes
        inputPath = "";
        outputPath = "";
        //

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton exit;
    private static javax.swing.JPanel jPanel1;
    private static javax.swing.JPanel jPanel2;
    private static javax.swing.JButton open;
    private static javax.swing.JButton save;
    private static javax.swing.JButton solve;
    // End of variables declaration//GEN-END:variables
}
